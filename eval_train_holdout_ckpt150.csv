text,pred,ref
40. write a Python function to Remove all duplicates from a given string,"def remove_duplicates(s):
    return s.replace("" "", """")","def removeDuplicate(str): 
    s=set(str) 
    s="""".join(s) 
    print(""Without Order:"",s) 
    t="""" 
    for i in str: 
        if(i in t): 
            pass
        else: 
            t=t+i 
    print(""With Order:"",t) 
    
str1=""conondrum""
removeDuplicate(str1) 

from .sin import sine
from .cos import cosine
from .tan import tangent
from .softmax import softmax
from .sigmoid import sigmoid
from .tanh import tanh
from .relu import ReLU
from .log import log
from .exp import exp

from .sin import dsine
from .cos import dcosine
from .tan import dtangent
from .sigmoid import dsigmoid
from .tanh import dtanh
from .log import dlog
from .exp import dexp

import math"
88 write a program to find variance of a dataset,"import numpy as np
data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
variance = np.var(data)
print(variance)","def variance(X):
    mean = sum(X)/len(X)
    tot = 0.0
    for x in X:
        tot = tot + (x - mean)**2
    return tot/len(X)

# main code
#  a simple data-set 
sample = [1, 2, 3, 4, 5] 
print(""variance of the sample is: "", variance(sample))"
"Write a program which can filter even numbers in a list by using filter function. The list is: [1,2,3,4,5,6,7,8,9,10].","a = [1,2,3,4,5,6,7,8,9,10]
b = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,","li = [1,2,3,4,5,6,7,8,9,10]
evenNumbers = filter(lambda x: x%2==0, li)
print evenNumbers"
Write a Python Program Print Restaurant Menu using Class given menu and cost as list,"class RestaurantMenu:
    def __init__(self, menu, cost):
        self.menu = menu
        self.cost = cost","class Food(object):
    def __init__(self, name, price):
        self.name = name
        self.price = price
    
    def getprice(self):
        return self.price
    
    def __str__(self):
        return self.name + ' : ' + str(self.getprice())
    
def buildmenu(names, costs):
    menu = []
    for i in range(len(names)):
        menu.append(Food(names[i], costs[i]))
    return menu

names = ['Coffee', 'Tea', 'Pizza', 'Burger', 'Fries', 'Apple', 'Donut', 'Cake']

costs = [250, 150, 180, 70, 65, 55, 120, 350]

Foods = buildmenu(names, costs)

n = 1
for el in Foods:
    print(n,'. ', el)
    n = n + 1"
Driver function,"def add(x, y):
    return x + y

print(add(2, 3))","List1 = [23, 65, 19, 90] 
pos1, pos2  = 1, 3

print(swapPositions(List1, pos1-1, pos2-1))"
write a program to combine two dictionaries using a priority dictionary and print the new combined dictionary.,"d1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
d2 = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
d3 = d1.copy()
d3.update(d2)
print(d3)","test_dict1 = {'Gfg' : 1, 'is' : 2, 'best' : 3} 
test_dict2 = {'Gfg' : 4, 'is' : 10, 'for' : 7, 'geeks' : 12} 
prio_dict = {1 : test_dict2, 2: test_dict1} 
res = prio_dict[2].copy() 
for key, val in prio_dict[1].items(): 
    res[key] = val 
print(""The dictionary after combination : "" + str(res))"
Write a python program to find and print second largest number from list of numbers,"numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88","num_array = [8, 6, 15, 23, 14, 28, 5, 1, 99]
largest = second_largest = num_array[0]
for i in range(1,len(num_array)):
    if num_array[i] > largest:
        second_largest = largest
        largest = num_array[i]
    elif num_array[i] > second_largest:
        second_largest = num_array[i]
print(second_largest)"
write a python program to calculate the average,"def average(x):
    return sum(x) / len(x)","list1 = [1,3,4,5]
average = (sum(list1)) / len(list1)
print(f""the average score is:  {average} "")"
Write a python function to calculate number of ways of selecting p non  consecutive stations out of n stations,"def num_ways_of_selecting_p_non_consecutive_stations(p, n):
    if n == 0:
        return 1
    else:
        return num_ways_of_selecting_p_non_consecutive_stations(p-1, n) + num_ways_of_selecting_p_non_consecutive_stations(p, n-1)","def stopping_station( p, n): 
    num = 1
    dem = 1
    s = p 
  
    while p != 1: 
        dem *= p 
        p-=1
      
    t = n - s + 1
    while t != (n-2 * s + 1): 
        num *= t 
        t-=1
    if (n - s + 1) >= s: 
        return int(num/dem) 
    else: 

        return -1"
5 write a python function to accept a number and return all the numbers from 0 to that number,"def num_from_zero(num):
    return [i for i in range(num) if i != 0]","def print_numbers(x):
    for i in range(x):
        print(i)"
"Write a function to calculate the compound interest for principal p, rate r and time in years y","def compound_interest(p, r, y):
    return p * r * y","def get_ci(p:float, r:float, t:float, n:float)->float:
    return round(p*((1+(r/(n*100)))**(n*t)) - p,2)"
write a python function to add elements of two lists,"def add_list(l1, l2):
    return l1 + l2","def add_two_lists(list1, list2):
   list1 = [1, 2, 3]
   list2 = [4, 5, 6]
   sum_list = []

   for (item1, item2) in zip(list1, list2):
      sum_list.append(item1+item2)
   return sum_list"
Write a Python Program to Convert Gray Code to Binary,"def convert_gray_to_binary(gray_code):
    binary_code = """"
    for i in gray_code:
        binary_code += str(i)
    return binary_code","def gray_to_binary(n):
    """"""Convert Gray codeword to binary and return it.""""""
    n = int(n, 2)
 
    mask = n
    while mask != 0:
        mask >>= 1
        n ^= mask

    return bin(n)[2:]"
Write a Python function to find the intersection of two arrays,"def intersection(arr1, arr2):
    return set(arr1).intersection(set(arr2))","def array_intersection(A,B):
	inter=list(set(A)&set(B))
	return inter"
write a python program to print bitwise OR operation,"a = 1
b = 2
print(a & b)
print(a | b)
print(a ^ b)","a = 60
b = 13
a_or_b = a|b
print(a_or_b)"
Write a function that returns cosine value of the input,"def cosine(a, b):
    return (a * b) / (a + b)","def derivative_cos(x:float)-> float:
    import math
    return -(math.sin(x))"
8 write a program to break a list into chunks of size N,"def chunks(l, n):
    for i in range(0, len(l), n):
        yield l[i:i + n]","l = [1, 2, 3, 4, 5, 6, 7, 8, 9]  
n = 4 
x = [l[i:i + n] for i in range(0, len(l), n)]  
print(x)"
write a Python3 code to demonstrate working of Convert List of Dictionaries to List of Lists Using list comprehension,"def convert_list_of_dictionaries_to_list_of_lists(list_of_dictionaries):
    list_of_lists = []
    for dictionary in list_of_dictionaries:
        list_of_lists.append(list(dictionary.values()))
    return list_of_lists","test_list = [{'Nikhil' : 17, 'Akash' : 18, 'Akshat' : 20}, 
            {'Nikhil' : 21, 'Akash' : 30, 'Akshat' : 10}, 
            {'Nikhil' : 31, 'Akash' : 12, 'Akshat' : 19}] 

print(""The original list is : "" + str(test_list)) 

res = [[key for key in test_list[0].keys()], *[list(idx.values()) for idx in test_list ]] 

print(""The converted list : "" + str(res))"
"Write a python function to find the area of a circle, whose radius is given","def circle_area(radius):
    import math
    return math.pi*radius**2","def findArea(r): 
    PI = 3.142
    return PI * (r*r)"
Write a program to print the union of two sets,"set1 = {1, 2, 3, 4, 5, 6, 7, 8, 9}
set2 = {1, 2, 3, 4, 5, 6, 7, 8, 9}
union = set1.union(set2)
print(union)","Set1 = {""1"",""2"",""3""}
Set2 = {""a"",""b"",""c""}
Set = Set1.union(Set2)

print(Set)"
write a python function to flatten one level of nesting,"def flatten(n):
    if n == 1:
        return n
    else:
        return flatten(n[0]) + flatten(n[1:])","def flatten(list_of_lists):
    from itertools import chain
    return chain.from_iterable(list_of_lists)"
Write a Python program to convert a list of tuples into a dictionary.,"list_of_tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]
dict_of_tuples = {}
for tup in list_of_tuples:
    dict_of_tuples[tup] = dict_of_tuples.get(tup, 0) + 1
print(dict_of_tuples)","l = [(""x"", 1), (""x"", 2), (""x"", 3), (""y"", 1), (""y"", 2), (""z"", 1)]
d = {}
for a, b in l:
    d.setdefault(a, []).append(b)
print(d)


# 73"
Write a Python program to  bin a numeric series to 10 groups of equal size,"series = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,","import pandas as pd
import numpy as np
ser = pd.Series(np.random.random(20))
deciled = pd.qcut(ser, q=[0, .10, .20, .3, .4, .5, .6, .7, .8, .9, 1], 
        labels=['1st', '2nd', '3rd', '4th', '5th', '6th', '7th', '8th', '9th', '10th'])
print(deciled)"
write a python program to handle exception when a given value is less than 10,"def less_than_10(value):
    try:
        print(value)
    except ValueError:
        print(""Value is less than 10"")","def check(x):
    if x < 10:
        raise ValueError('x should not be less than 10!')
    else:
        return x
check(9)


# In[104]:"
Write a function that returns length of the list,"def length(lst):
    return len(lst)","def list_length(l):
    return len(l)"
Write a program to compute the number of digits in multiplication of two given integers,"num1 = int(input(""Enter the first number: ""))
num2 = int(input(""Enter the second number: ""))
result = num1 * num2
print(f""The number of digits in multiplication of {num1} and {num2} is {result}"")","a,b = 312, 410
print(len(str(a*b)))"
Write a Python program to fill an intermittent time series so all missing dates show up with values of previous non-missing date,"import pandas as pd
df = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['a', 'b', 'c'])
df.fillna(method='ffill', inplace=True)
print(df)","import pandas as pd
import numpy as np
ser = pd.Series([1,10,3, np.nan], index=pd.to_datetime(['2000-01-01', '2000-01-03', '2000-01-06', '2000-01-08']))
print(ser.resample('D').ffill())"
write a program to print count of vowels in a string,"string = ""abcd""
vowels = ""aeiou""
count = 0
for i in range(len(string)):
    if string[i] in vowels:
        count += 1
print(count)","st = ""ammaradil""
vowle = ['a', 'e', 'i', 'o', 'u']
count = 0

for s in st:
    if s in vowle:
        count = count+1

print(""Count"", count)"
write a python class that defines a Tree and add child,"class Tree:
    def __init__(self, value):
        self.value = value
        self.children = []

    def add_child(self, child):
        self.children.append(child)","class TreeNode:
    def __init__(self, data):
        self.data = data
        self.parent = None
        self.children =[]
    
    def add_child(self, child):
        child.parent = self
        self.children.append(child)

t = TreeNode(""Arun"")
t.add_child(TreeNode(""Shruthi""))


# In[63]:"
write a python function to return only odd numbers in a list,"def odd_numbers(nums):
    return [x for x in nums if x % 2 == 0]","def filter_odd(nums):
   return list(filter(lambda num: num % 2 == 1, nums))"
Write a program which can map() to make a list whose elements are square of numbers between 1 and 20 (both included).,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,","squaredNumbers = map(lambda x: x**2, range(1,21))
print squaredNumbers

# Define a class named American which has a static method called printNationality.
class American(object):
    @staticmethod
    def printNationality():
        print ""America""
anAmerican = American()
anAmerican.printNationality()
American.printNationality()

# Define a class named American and its subclass NewYorker. 
class American(object):
    pass
class NewYorker(American):
    pass
anAmerican = American()
aNewYorker = NewYorker()
print anAmerican
print aNewYorker

# Define a class named Circle which can be constructed by a radius. The Circle class has a method which can compute the area. 
class Circle(object):
    def __init__(self, r):
        self.radius = r
    def area(self):
        return self.radius**2*3.14"
Write a Python program to check whether an alphabet is a vowel or consonant,"alphabet = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U', 'A', 'E","l = input(""Input a letter of the alphabet: "")
if l in ('a', 'e', 'i', 'o', 'u'):
    print(""%s is a vowel."" % l)
elif l == 'y':
    print(""Sometimes letter y stand for vowel, sometimes stand for consonant."")
else:
    print(""%s is a consonant."" % l)"
Write a Python function to find the intersection of two arrays,"def intersection(arr1, arr2):
    return set(arr1).intersection(set(arr2))","def array_intersection(A,B):
	inter=list(set(A)&set(B))
	return inter"
write a python function that makes all negative values in a list zero and returns it,"def make_negative_list(l):
    return [x if x < 0 else 0 for x in l]","def make_negative_zero(items):
   return [0 if item < 0 else item for item in items]"
18. Python Program to Print the Fibonacci sequence,"def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)","nterms = int(input(""How many terms? ""))

# first two terms
n1, n2 = 0, 1
count = 0

# check if the number of terms is valid
if nterms <= 0:
   print(""Please enter a positive integer"")
elif nterms == 1:
   print(""Fibonacci sequence upto"",nterms,"":"")
   print(n1)
else:
   print(""Fibonacci sequence:"")
   while count < nterms:
       print(n1)
       nth = n1 + n2
       # update values
       n1 = n2
       n2 = nth
       count += 1"
write a python function to append text to a user provided file,"def append_text(file_name, text):
    with open(file_name, 'a') as f:
        f.write(text)","def file_read(fname):
    with open(fname, ""w"") as myfile:
      myfile.write(""Appending line one\n"")
      myfile.write(""Appending line two"")
      txt = open(fname)
      print(txt.read())"
write a function to convert tuple to list,"def tuple_to_list(tuple):
    return list(tuple)","def convert_tuple2list(t):
    return list(t)"
write a python program to iterate through a string using for loop,"string = ""Hello World""
for i in range(len(string)):
    print(string[i])","h_letters = []

for letter in 'human':
    h_letters.append(letter)

print(f""{h_letters}"")


# In[127]:"
Write a python program to Implement Radix sort and print the sorted list for the below list,"def radix_sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] % arr[j + 1] == 0:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr","def radix_sort(alist, base=10):
    if alist == []:
        return
 
    def key_factory(digit, base):
        def key(alist, index):
            return ((alist[index]//(base**digit)) % base)
        return key
    largest = max(alist)
    exp = 0
    while base**exp <= largest:
        alist = counting_sort(alist, base - 1, key_factory(exp, base))
        exp = exp + 1
    return alist
 
def counting_sort(alist, largest, key):
    c = [0]*(largest + 1)
    for i in range(len(alist)):
        c[key(alist, i)] = c[key(alist, i)] + 1
 
    c[0] = c[0] - 1
    for i in range(1, largest + 1):
        c[i] = c[i] + c[i - 1]
 
    result = [None]*len(alist)
    for i in range"
"Write a python function to generate Cube Numbers (1, 8, 27, 64, 125...)","def generate_cube_numbers():
    return [1, 8, 27, 64, 125]","def cube_numbers(n):
    for i in range(n):
        yield i **  3
            
# 60"
"9 write a python function to update a dictionary with a new key, value pair","def update_dict(d, k, v):
    d[k] = v","def update_dictionary(dict, key, value):
    dict[str(key)] = value
    return dict"
write a program to print keys in a dictionary whose values are greater than a given input.,"d = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6, 'g':7, 'h':8, 'i':9, 'j':10, 'k':11, 'l':12, 'm':13, 'n':14, 'o':15, 'p':16, 'q':17, 'r':18, 's':19, 't':20, 'u':21, 'v':22, 'w':23, 'x':24, 'y':25, 'z':26}
print(d.keys())","test_dict = {'tsai' : 4, 'random_key' : 2, 'foo' : 3, 'bar' : 'END'} 
K = 3
res = {key : val for key, val in test_dict.items() 
                   if type(val) != int or val > K} 
print(""Values greater than K : "", res.keys())"
Write a function that takes number of disks in tower of hanaoi problem and returns the minimum number of steps required,"def hanaoi(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 3
    elif n == 4:
        return 4
    elif n == 5:
        return 5
    elif n == 6:
        return 6
    elif n == 7:
        return 7
    elif n == 8:
        return 8
    elif n == 9:
        return 9
    elif n == 10:
        return 10
    elif n == 11:
        return 11
    elif n == 12:
        return 12
    elif n == 13:
        return 13
    elif n == 14:
        return 14
    elif n == 15:
        return 15
    elif n == 16:
        return 16
    elif n == 17:
        return 17
    elif n == 18:
        return 18
    elif n == 19:
        return 19
    elif n == 20:
        return 20
    elif n == 21:
        return 21
    elif n == 22:
        return 22
    elif n == 23:
        return 23
    elif n == 24:
        return 24
    elif n == 25:
        return 25
    elif n == 26:
        return 26
    elif n == 27:
        return 27
    elif n == 28:
        return 28
    elif n == 29:
        return 29
    elif n == 30:
        return 30
    elif n == 31:
        return 31
    elif n == 32:
        return 32
    elif n == 33:
        return 33
","def hanoi(x):
    if x == 1:
        return 1
    else:
        return 2*hanoi(x-1) + 1"
write a program to remove common element between two sets,"set1 = {1, 2, 3, 4, 5, 6, 7, 8, 9}
set2 = {1, 2, 3, 4, 5, 6, 7, 8, 9}
set3 = {1, 2, 3, 4, 5, 6, 7, 8, 9}
set4 = {1, 2, 3, 4, 5, 6, 7, 8, 9}
set5 = {1, 2, 3, 4, 5, 6, 7, 8, 9}
set6 = {1, 2, 3, 4, 5, 6, 7, 8, 9}
set7 = {1, 2, 3, 4, 5, 6, 7, 8, 9}
set8 = {1, 2, 3, 4, 5, 6, 7, 8, 9}
set9 = {1, 2, 3, 4, 5, 6, 7, 8, 9}
set10 = {1, 2, 3, 4, 5, 6, 7, 8, 9}
set11 = {1, 2, 3, 4, 5, 6, 7, 8, 9}
set12 = {1, 2, 3, 4, 5, 6, 7, 8, 9}
set13 = {1, 2, 3, 4, 5, 6, 7, 8, 9}
set14 = {1, 2, 3, 4, 5, 6, 7, 8, 9}
set15 = {1, 2, 3, 4, 5, 6, 7, 8, 9}
set16 = {1, 2, 3, 4, 5, 6, 7, 8, 9}
set17 = {1, 2, 3, 4, 5, 6","s1 = {""apple"", ""banana"", ""cherry""}
s2 = {""google"", ""microsoft"", ""apple""}

s1.difference_update(s2)
print(s1)"
"Write a python program to implement Rock, paper, scissor game and print the results","from random import randint
r = randint(1,3)
p = randint(1,3)
s = randint(1,3)
if r == p == s == 0:
    print(""Rock"")
elif r == p == s == 1:
    print(""Paper"")
elif r == s == 0:
    print(""Scissor"")","import random
import os
import re
os.system('cls' if os.name=='nt' else 'clear')
while (1 < 2):
    print(""\n"")
    print(""Rock, Paper, Scissors - Shoot!"")
    userChoice = input(""Choose your weapon [R]ock], [P]aper, or [S]cissors: "")
    if not re.match(""[SsRrPp]"", userChoice):
        print(""Please choose a letter:"")
        print(""[R]ock, [S]cissors or [P]aper."")
        continue
    print(""You chose: "" + userChoice)
    choices = ['R', 'P', 'S']
    opponenetChoice = random.choice(choices)
    print(""I chose: "" + opponenetChoice)
    if opponenetChoice == str.upper(userChoice):
        print(""Tie! "")
    #if opponenetChoice == str(""R"") and str.upper(userChoice) == ""P""
    elif opponenetChoice == 'R'"
Write a function to calculate the kinetic energy of an object of mass m and velocity v,"def kinetic_energy(m, v):
    return m*v","def cal_ke(mass:float,velocity:float)->float:
    return (mass*(velocity)**2)/2"
61 write a program to sort Dictionary by Values and Keys and print it,"d = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
print(sorted(d.items(), key=lambda x: x[1], reverse=True))","test_dict = {""Gfg"" : 1, ""is"" :  3, ""Best"" : 2, ""for"" : 3, ""Geeks"" : 2} 
  
# printing original dictionary 
print(""The original dictionary is : "" + str(test_dict)) 
  
# - sign for descended values, omit if low-high sorting required 
res = {val[0] : val[1] for val in sorted(test_dict.items(), key = lambda x: (-x[1],x[0]))} 
  
# printing result  
print(""Sorted dictionary : "" + str(res))"
4. write a python function to add two user provided numbers and return the sum,"def add_two(a, b):
    return a + b","def add_two_numbers(num1, num2):
    sum = num1 + num2
    return sum"
Write a program to print the sum of squares of first n natural numbers,"def sum_squares(n):
    sum = 0
    for i in range(1, n+1):
        sum += i**2
    return sum","n = 21
sum_n = 0
for i in range(1, n+1):
    sum_n += i**2
print(sum_n)"
21 write a function that removes all the punctuations from a string,"def remove_punctuations(string):
    return string.translate(str.maketrans('', '', string.punctuation))","import string


def remove_punct(s):
    return """".join(ch for ch in s if ch not in set(string.punctuation))"
write a Python function to find area of an Ellipse.,"def area_of_ellipse(x, y):
    return (x**2 + y**2)**0.5","def findArea(a, b): 
    
    Area = 3.142 * a * b ; 

    print(""Area:"", round(Area, 2)); 

a = 5; 
b = 4; 

findArea(a, b)"
write a python program to swap two numbers and print it,"a = 5
b = 6
print(a, b)
a, b = b, a
print(a, b)","num1 = 5
num2 = 10
temp = num1
num1 = num2
num2 = temp
print(""The value of num1 after swapping: {}"".format(num1))
print(""The value of num2 after swapping: {}"".format(num2))

3."
write a python program to find the sequences of one upper case letter followed by lower case letters.,"upper_case_letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
lower_case_letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
print(upper_case_letters + lower_case_letters)","import re
text=""Albert""
patterns = '[A-Z]+[a-z]+$'
if re.search(patterns, text):
  print('Found a match!')
else:
  print('Not matched!')"
write a python function to return count of number of vowels in a sentence,"def count_vowels(sentence):
    count = 0
    for i in sentence:
        if i in 'aeiou':
            count += 1
    return count","def count_vowels(sentence):
   count = 0
   for letter in sentence:
      if letter in ""aeiouAEIOU"":
         count += 1
   return count"
write a function to find the sum of Sine series,"def sum_sine_series(n):
    sum = 0
    for i in range(n):
        sum += (i*2)
    return sum","import math
def sin(x,n):
    sine = 0
    for i in range(n):
        sign = (-1)**i
        pi=22/7
        y=x*(pi/180)
        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign
    return sine"
59 write a python program to  remove digits from Dictionary String Values List,"d = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6, 'g':7, 'h':8, 'i':9, 'j':10, 'k':11, 'l':12, 'm':13, 'n':14, 'o':15, 'p':16, 'q':17, 'r':18, 's':19, 't':20, 'u':21, 'v':22, 'w':23, 'x':24, 'y':25, 'z':26}
print(d.keys())","import re 
  
# initializing dictionary 
test_dict = {'Gfg' : [""G4G is Best 4"", ""4 ALL geeks""], 
             'is' : [""5 6 Good""],  
             'best' : [""Gfg Heaven"", ""for 7 CS""]}  
  
# printing original dictionary 
print(""The original dictionary is : "" + str(test_dict)) 
  
# using dictionary comprehension to go through all keys 
res = {key: [re.sub('\d', '', ele) for ele in val] 
       for key, val in test_dict.items()} 
          
# printing result  
print(""The filtered dictionary : "" + str(res))"
Write a function to return the time taken by a given of moving object based of distance travelled in given time,"def distance_travelled_time(moving_object, distance):
    return distance","def cal_time(distance:float,speed:float)->float:
    return distance/speed"
Write a Python function to print the GSD of Two Numbers,"def gsd(x, y):
    return (x**2 + y**2)**0.5","def gcd(a,b):
    if(b==0):
        return a
    else:
        return gcd(b,a%b)"
Write a Python program to check/test multiple variables against a value,"a = 1
b = 2
c = 3
d = 4
e = 5
f = 6
g = 7
h = 8
i = 9
j = 10
k = 11
l = 12
m = 13
n = 14
o = 15
p = 16
q = 17
r = 18
s = 19
t = 20
u = 21
v = 22
w = 23
x = 24
y = 25
z = 26
","a = 10
b = 20
c = 30
if 10 in {a, b, c}:
  print(""True"")
else:
  print(""False"")"
Write a python program to Convert and print Snake case to Pascal case,"def snake_to_pascal(snake):
    return ''.join(snake[i:i+3] for i in range(0, len(snake), 3))
print(snake_to_pascal(snake_to_pascal(snake_to_pascal(snake_to_pascal(snake_to_pascal(snake_to_pascal(snake_to_pascal(snake_to_pascal(snake_to_pascal(snake_to_pascal(snake_to_pascal(snake_to_pascal(snake_to_pascal(snake_to_pascal(snake_to_pascal(snake_to_pascal(snake_to_pascal(snake_to_pas","test_str = 'go_east_or_west_india_is_the_best'
res = test_str.replace(""_"", "" "").title().replace("" "", """")
print(res)"
Write a function to remove punctuation from the string,"def remove_punctuation(string):
    return string.translate(str.maketrans('', '', string.punctuation))","def r_punc():
    test_str = ""end, is best : for ! Nlp ;""
    print(""The original string is : "" + test_str)
    punc = r'!()-[]{};:\, <>./?@#$%^&*_~'
    for ele in test_str:
        if ele in punc:
            test_str = test_str.replace(ele, """")
    print(""The string after punctuation filter : "" + test_str)"
Driver program to test the above function,"def test_function():
    print(""test_function"")","arr = [10 , 22 , 9 , 33 , 21 , 50 , 41 , 60] 
n = len(arr) 
print (""Length of lis is "", lis(arr) )"
Write a Python program to Subtract a week ( 7 days) from a given date in Python,"from datetime import date
today = date.today()
print(today - 7)","from datetime import datetime, timedelta
given_date = datetime(2020, 2, 25)
days_to_subtract = 7
res_date = given_date - timedelta(days=days_to_subtract)
print(res_date)"
"72 write a program to print the running time of execution of ""1+1"" for 100 times.","for i in range(100):
    print(i+1)","from timeit import Timer

t = Timer(""for i in range(100):1+1"")
print(t.timeit())"
84 write a program to design a dice throw function,"def throw_dice(num):
    for i in range(num):
        print(i)","import random

def dice():
    return random.choice([1,2,3,4,5,6])"
write a program to find and print the largest among three numbers,"num1 = int(input(""Enter first number: ""))
num2 = int(input(""Enter second number: ""))
num3 = int(input(""Enter third number: ""))
if num1 > num2 and num1 > num3:
    print(num1)
elif num2 > num1 and num2 > num3:
    print(num2)
elif num3 > num1 and num3 > num2:
    print(num3)","num1 = 10
num2 = 12
num3 = 14
if (num1 >= num2) and (num1 >= num3):
   largest = num1
elif (num2 >= num1) and (num2 >= num3):
   largest = num2
else:
   largest = num3
print(f'largest:{largest}')"
46 write Python Function to print leaders in array,"def print_leaders(leaders):
    for leader in leaders:
        print(leader)","def printLeaders(arr,size):
         
    for i in range(0, size):
        for j in range(i+1, size):
            if arr[i]<arr[j]:
                break
        if j == size-1:  
            print(arr[i])

arr=[16, 17, 4, 3, 5, 2] 
printLeaders(arr, len(arr))"
write a program Creating a Dictionary  with dict() method,"d = dict()
print(d)
print(d.values())
print(d.keys())
print(d.values())
print(d.items())
print(d.items())","Dict = dict({1: 'Geeks', 2: 'For', 3:'Geeks'}) 
print(""\nDictionary with the use of dict(): "") 
print(Dict)"
write a python program to print unique words in a sentence,"sentence = ""The quick brown fox jumps over the lazy dog""
words = sentence.split()
unique_words = set(words)
print(unique_words)","sentence = 'the king is the one'
unique = set(sentence.split(' '))
print(unique)"
write a  Python3 code to demonstrate working of Convert Dictionaries List to Order Key Nested dictionaries Using loop + enumerate(),"d1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}
d2 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}
d3 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w","test_list = [{""Gfg"" : 3, 4 : 9}, {""is"": 8, ""Good"" : 2}, {""Best"": 10, ""CS"" : 1}] 

print(""The original list : "" + str(test_list)) 

res = dict() 
for idx, val in enumerate(test_list): 
    res[idx] = val 

print(""The constructed dictionary : "" + str(res))"
write a python function to return the number of lines in a file,"def count_lines(filename):
    with open(filename, 'r') as f:
        return len(f.readlines())","def count_lines(filename):
   with open(filename, 'r') as f:
      contents = f.read().split('\n')
      return len(contents)"
"Write a python function to perform Matrix Chain multiplication i.e. Given a sequence of matrices, find the most efficient way to multiply these matrices together","def matrix_chain_multiplication(matrix):
    if len(matrix) == 1:
        return matrix[0]
    else:
        return matrix_chain_multiplication(matrix[0:1]) + matrix_chain_multiplication(matrix[1:])","import sys 

def MatrixChainOrder(p, i, j): 
  
    if i == j: 
        return 0
  
    _min = sys.maxsize 
      
    for k in range(i, j): 
      
        count = (MatrixChainOrder(p, i, k)  
             + MatrixChainOrder(p, k + 1, j) 
                   + p[i-1] * p[k] * p[j]) 
  
        if count < _min: 
            _min = count; 
      
  
    return _min;"
Write a Python function that accepts a measurement value in inches and returns the equivalent in feet,"def feet_to_inches(measurement_value):
    return measurement_value * 1.8","def inches_to_feet(inches):
    if inches < 12:
        return 0
    return inches/12

# 100"
write a python program to input a Number N from user and print Even Numbers from 1 to N,"n = int(input(""Enter a number: ""))
for i in range(1, n + 1):
    if i % 2 == 0:
        print(i)","maximum = int(input("" Please Enter the Maximum Value : ""))

for number in range(1, maximum+1):
    if(number % 2 == 0):
        print(""{0}"".format(number))"
23 write a function to calculate the residual sum of squares between two lists of the same size,"def residual_sum_squares(a, b):
    return sum([a[i] * a[i] for i in range(len(a))]) + sum([b[i] * b[i] for i in range(len(b))])","def rss(lst1, lst2):
    diff = [lst1[x] - lst2[x] for x in range(len(lst1))]
    return sum(list(map(lambda x: x ** 2, diff)))"
92 write a program to print the version information,"import sys
print(sys.version)","import sys

print(""Python version: "", sys.version)
print(""Python version info: "", sys.version_info)"
84  write a python program remove particular data type Elements from Tuple and print it,"a = (1, 2, 3, 4, 5, 6, 7, 8, 9)
print(a)","test_tuple = (4, 5, 'Gfg', 7.7, 'Best') 
  
# printing original tuple 
print(""The original tuple : "" + str(test_tuple)) 
  
# initializing data type 
a=tuple()
data_type = int 
for i in test_tuple:
    if not isinstance(i,data_type):
       a=a+(i,)
print(list(a))"
42 write a function to subtract two matrices in python,"def subtract_matrices(mat1, mat2):
    return [mat1[i][j] - mat2[i][j] for i in range(len(mat1)) for j in range(len(mat2))]","matrix1 = [[0, 1, 2], 
           [3, 5, 5], 
           [6, 7, 8]]

matrix2 = [[1, 2, 3], 
           [4, 5, 6], 
           [7, 8, 9]]

def subtractTheMatrix(matrix1, matrix2):
    matrix1Rows = len(matrix1)
    matrix2Rows = len(matrix2)
    matrix1Col = len(matrix1[0])
    matrix2Col = len(matrix2[0])

    #base case
    if(matrix1Rows != matrix2Rows or matrix1Col != matrix2Col):
        return ""ERROR: dimensions of the two arrays must be the same""

    matrix = []
    rows = []

    for i in range(0, matrix1Rows):
        for j in range(0, matrix2Col):
            rows.append(0)
        matrix.append(rows.copy())
        rows = []

    for i in range(0, matrix1Rows):
        for j in range(0, matrix2Col):
            matrix[i"
46 write a python program to test if Values Sum is Greater than Keys Sum in dictionary and print it,"d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}
print(sum(d.values()) > sum(d.keys()))","test_dict = {5: 3, 1: 3, 10: 4, 7: 3, 8: 1, 9: 5} 
  

  
res = sum(list(test_dict.keys())) < sum(list(test_dict.values())) 
  
# printing result 
print(""The required result : "" + str(res))"
write a python program to explain the use of assert,"assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True)
assert(True","# x=1
# y=8
# assert x>y, 'X too small'"
66 write a program to transpose a matrix using a nested loop,"matrix = [[1,2,3],[4,5,6],[7,8,9]]
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        matrix[i][j] = matrix[i][j] * matrix[i][j]
print(matrix)","X = [[12,7],
    [4 ,5],
    [3 ,8]]

result = [[0,0,0],
         [0,0,0]]

# iterate through rows
for i in range(len(X)):
   # iterate through columns
   for j in range(len(X[0])):
       result[j][i] = X[i][j]

for r in result:
   print(r)"
68 write a program to randomly generate a list with 5 even numbers between 100 and 200 inclusive.,"import random
list = []
for i in range(100, 200):
    if random.randint(0, 5) % 2 == 0:
        list.append(i)
print(list)","import random

print(random.sample([i for i in range(100, 201) if i % 2 == 0], 5))"
Write a Python Program to print the Reverse a Given Number,"def reverse(n):
    return n[::-1]","n=1023
rev=0
while(n>0):
    dig=n%10
    rev=rev*10+dig
    n=n//10
print(""Reverse of the number:"",rev)"
Write a program to compute the frequency of the words from the input. The output should output after sorting the key alphanumerically.,"words = input().split()
freq = {}
for word in words:
    if word not in freq:
        freq[word] = 1
    else:
        freq[word] += 1
print(sorted(freq.items(), key=lambda x: x[1], reverse=True))","freq = {}   # frequency of words in text
line = input()
for word in line.split():
    freq[word] = freq.get(word,0)+1

words = freq.keys()
words.sort()

for w in words:
    print(""%s:%d"" % (w,freq[w]))"
74 Write a Python function to compute s the sum of the digits of the number 2 to the power 20.,"def sum_digits_to_power_20(n):
    s = 0
    while n > 0:
        s += n % 10
        n = n // 10
    return s","def digits_sum():
	n = 2**20
	ans = sum(int(c) for c in str(n))
	return str(ans)"
write a python program to make use of modulo operator,"a = 1
b = 2
print(a % b)",print(f'modulo 15 % 4: Sol->{15 % 4}')
Write a function to Subtracts two lists element wise,"def subtract_list(l1, l2):
    return [x - y for x, y in zip(l1, l2)]

l1 = [1, 2, 3]
l2 = [4, 5, 6]
print(subtract_list(l1, l2))","def sub_listelements(l1:list, l2:list):
    return [i-j for i, j in zip(l1,l2)]"
Write a Python program to convert a tuple to a dictionary.,"tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,","tuplex = ((2, ""w""),(3, ""r""))
print(dict((y, x) for x, y in tuplex))"
write a python function to locate the rightmost value less than x,"def find_rightmost_value_less_than_x(x, y):
    return max(y, x)","def find_lt(a, x):
    from bisect import bisect_left  
    i = bisect_left(a, x)
    if i:
        return a[i-1]
    raise ValueError"
Driver program,"if __name__ == ""__main__"":
    n = int(input())
    for i in range(n):
        print(i+1)","if __name__ == ""__main__"": 
    input = 'Hello World'
    heterogram(input)"
80 write a Python program to print the roots of a quadratic equation,"a = 1
b = 2
c = 3
d = 4
e = 5
f = 6
g = 7
h = 8
i = 9
j = 10
k = 11
l = 12
m = 13
n = 14
o = 15
p = 16
q = 17
r = 18
s = 19
t = 20
u = 21
v = 22
w = 23
x = 24
y = 25
z = 26

print(""The roots of a quadratic equation are:"")
print(f""a = {a}"")
print(f""b = {b}"")
print(f""c = {c}"")
print(f""d = {d}"")
print(f""e = {e}"")
print(f""f = {f}"")
print(f""g = {g}"")
print(f""h = {h}"")
print(f""i = {i}"")
print(f""j = {j}"")
print(f""k = {k}"")
print(f""l = {l}"")
print(f""m = {m}"")
print(f""n = {n}"")
print(f""o = {o}"")
print(f""p = {p}"")
print(f""q = {q}"")
print(f""r = {r}"")
print(f""s = {s}"")
print(f""t = {t}"")
print(f""u = {u}"")
print(f""v = {v}"")
print(f""w = {w}"")
print(f""x = {x}"")
print(","import math
a = float(input(""Enter the first coefficient: ""))
b = float(input(""Enter the second coefficient: ""))
c = float(input(""Enter the third coefficient: ""))
if (a!=0.0):
    d = (bb)-(4ac) 
    if (d==0.0):
        print(""The roots are real and equal."") 
        r = -b/(2a)
        print(""The roots are "", r,""and"", r)
    elif(d>0.0):
        print(""The roots are real and distinct."")
        r1 = (-b+(math.sqrt(d)))/(2a) 
        r2 = (-b-(math.sqrt(d)))/(2a)
        print(""The root1 is: "", r1)
        print(""The root2 is: "", r2)
    else:
        print(""The roots are imaginary."")
        rp = -b/(2a) ip = math.sqrt(-d)/(2a)
        print(""The root1 is: "", rp, ""+ i"",ip)"
Write a Python Program to Remove the Characters of Odd Index Values in a String,"def remove_odds(string):
    return string[::-1]","def modify(string):  
    final = """"   
    for i in range(len(string)):  
        if i % 2 == 0:  
            final = final + string[i]  
    return final"
Python3 code to demonstrate working of Extract String till Numeric Using isdigit() + index() + loop,"def extract_string_till_numeric(string):
    for i in range(len(string)):
        if string[i].isdigit():
            return string[i]
    return """"","test_str = ""geeks4geeks is best""
print(""The original string is : "" + str(test_str)) 
temp = 0
for chr in test_str: 
    if chr.isdigit(): 
        temp = test_str.index(chr) 
print(""Extracted String : "" + str(test_str[0 : temp])) 

1."
58 function to show boolean true / false is a number,"def show_true_false(num):
    if num == True:
        print(""True"")
    elif num == False:
        print(""False"")","def bool_show(a=5):
    return True*a"
Write a python program to Implement Bubble sort and print the sorted list for the below list,"def bubble_sort(arr):
    for i in range(len(arr)-1):
        for j in range(len(arr)-1-i):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr","def bubble_sort(alist):
    for i in range(len(alist) - 1, 0, -1):
        no_swap = True
        for j in range(0, i):
            if alist[j + 1] < alist[j]:
                alist[j], alist[j + 1] = alist[j + 1], alist[j]
                no_swap = False
        if no_swap:
            return
 
 
alist = [2, 3, 5, 6, 4, 5]
bubble_sort(alist)
print('Sorted list: ', end='')
print(alist)"
Write a Python function to reverse words in a string.,"def reverse_words(s):
    return ' '.join(reversed(s.split()))","def reverse_string_words(text):
    for line in text.split('\n'):
        return(' '.join(line.split()[::-1]))


# 35"
"Write a Python function that Given a string and an integer number n, remove characters from a string starting from zero up to n and return a new string","def remove_zero_up_to_n(string, n):
    return string[0:n]","def removeChars(str, n):
  return str[n:]"
"write a python function to list unique elements, preserving order remembering only the element just seen.""","def unique_elements(elements):
    seen = set()
    return [e for e in elements if e not in seen]","def unique_justseen(iterable, key=None):
    import operator
    from itertools import groupby    
    # unique_justseen('AAAABBBCCDAABBB') --> A B C D A B
    # unique_justseen('ABBCcAD', str.lower) --> A B C A D
    return map(next, map(operator.itemgetter(1), groupby(iterable, key)))"
Write a function that returns a dictionary sorted ascending by its keys,"def sort_dict(d):
    return {k: v for k, v in sorted(d.items(), key=lambda item: item[1])}","def ascending_dict_keysort(d:dict):
    return {key: val for key, val in sorted(d.items(), key = lambda ele: ele[0])}"
write a python function to return the base 10 logarithm of a number,"def base_10_log(num):
    if num == 0:
        return 0
    elif num == 1:
        return 1
    elif num == 2:
        return 2
    elif num == 3:
        return 3
    elif num == 4:
        return 4
    elif num == 5:
        return 5
    elif num == 6:
        return 6
    elif num == 7:
        return 7
    elif num == 8:
        return 8
    elif num == 9:
        return 9
    elif num == 10:
        return 10
    elif num == 11:
        return 11
    elif num == 12:
        return 12
    elif num == 13:
        return 13
    elif num == 14:
        return 14
    elif num == 15:
        return 15
    elif num == 16:
        return 16
    elif num == 17:
        return 17
    elif num == 18:
        return 18
    elif num == 19:
        return 19
    elif num == 20:
        return 20
    elif num == 21:
        return 21
    elif num == 22:
        return 22
    elif num == 23:
        return 23
    elif num == 24:
        return 24
    elif num == 25:
        return 25
    elif num == 26:
        return 26
    elif num == 27:
        return 27
    elif num == 28:
        return 28
    elif num == 29:
        return 29
    elif num == 30:
        return 30
    elif num == 31:
        return 31
    elif num == 32:
        return 32
    elif num == 33:
        return 33","def get_natural_log_value(i):
    import math
    return(math.log10(i))"
write a python program to print a random vowel,"import random
vowel = random.choice(['a','e','i','o','u'])
print(vowel)","import random
vowels = ['a', 'e', 'i', 'o', 'u']
print(random.choice(vowels))"
Write a Python program that prints each item and its corresponding type from the following list.,"my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(my_list[0])
print(my_list[1])
print(my_list[2])
print(my_list[3])
print(my_list[4])
print(my_list[5])
print(my_list[6])
print(my_list[7])
print(my_list[8])
print(my_list[9])
print(my_list[10])
print(my_list[11])
print(my_list[12])
print(my_list[13])
print(my_list[14])
print(my_list[15])
print(my_list[16])
print(my_list[17])
print(my_list[18])
print(my_list[19])
print(my_list[20])
print(my_list[21])
print(my_list[22])
print(my_list[23])
print(my_list[24])
print(my_list[25])
print(my_list[26])
print(my_list[27])
print(my_list[28])
print(my_list[29])
print(my_list[30])
print(my_list[31])
print(my_list[32])
print(my_list[33])
print(my_list[34])
print(my_list[35])
print(my_list[36])
print(my_list[37])
print(my_list[38])
print(my_list[39])","datalist = [1452, 11.23, 1+2j, True, 'w3resource', (0, -1), [5, 12],
{""class"":'V', ""section"":'A'}]
for item in datalist:
   print (""Type of "",item, "" is "", type(item))"
write a python program to print the least frequent character in a string,"s = ""hello""
f = {}
for i in s:
    if i not in f:
        f[i] = 1
    else:
        f[i] += 1
print(f[min(f.values())])","test_str = ""this is test string""
all_freq = {}
for i in test_str:
    if i in all_freq:
        all_freq[i] += 1
    else:
        all_freq[i] = 1
res = min(all_freq, key = all_freq.get)
print(res)"
write Python code to demonstrate to remove the tuples if certain criteria met,"a = (1, 2, 3, 4, 5, 6, 7, 8, 9)
b = (1, 2, 3, 4, 5, 6, 7, 8, 9)
c = (1, 2, 3, 4, 5, 6, 7, 8, 9)
d = (1, 2, 3, 4, 5, 6, 7, 8, 9)
e = (1, 2, 3, 4, 5, 6, 7, 8, 9)
f = (1, 2, 3, 4, 5, 6, 7, 8, 9)
g = (1, 2, 3, 4, 5, 6, 7, 8, 9)
h = (1, 2, 3, 4, 5, 6, 7, 8, 9)
i = (1, 2, 3, 4, 5, 6, 7, 8, 9)
j = (1, 2, 3, 4, 5, 6, 7, 8, 9)
k = (1, 2, 3, 4, 5, 6, 7, 8, 9)
l = (1, 2, 3, 4, 5, 6, 7, 8, 9)
m = (1, 2, 3, 4, 5, 6, 7, 8, 9)
n = (1, 2, 3, 4, 5, 6, 7, 8, 9)
o = (1, 2, 3, 4, 5, 6, 7, 8, 9)
p = (1, 2, 3, 4, 5, 6, 7, 8, 9)
q = (1, 2, 3, 4, 5, 6, 7, 8, 9)
r = (1, 2, 3,","ini_tuple = [('b', 100), ('c', 200), ('c', 45), 
                        ('d', 876), ('e', 75)] 
print(""intial_list"", str(ini_tuple)) 
result = list(filter(lambda x: x[1] <= 100, ini_tuple)) 
print (""Resultant tuple list: "", str(result))"
write a python function to decapitalize the first letter of user provided string.,"def decapitalize(string):
    return string[0].upper() + string[1:]","def decapitalize(s, upper_rest = False):
  return ''.join([s[:1].lower(), (s[1:].upper() if upper_rest else s[1:])])"
write a python function to return the dot product of two vectors,"def dot_product(vec1, vec2):
    return vec1[0] * vec2[0] + vec1[1] * vec2[1]","def dotproduct(vec1, vec2):
    return sum(map(operator.mul, vec1, vec2))"
write a python program to concatenate two dictionaries,"d1 = {'a': 1, 'b': 2, 'c': 3}
d2 = {'a': 4, 'b': 5, 'c': 6}
d3 = d1.copy()
d3.update(d2)
print(d3)","d1 = {'a' : 1 ,'b' : 2}
d2 = {'c' : 1 ,'d' : 2}
d3 = {**d1,**d2}
print(d3)"
Write python program to find whether-number-power-two,"def is_power_two(n):
    if n == 1:
        return True
    if n == 2:
        return False
    if n % 2 == 0:
        return is_power_two(n // 2)
    else:
        return is_power_two(n // 2) and is_power_two(n % 2)","def is_power_of_two(n):
""""""Return True if n is a power of two.""""""
if n <= 0:
return False
else:
return n & (n - 1) == 0


n = int(input('Enter a number: '))

if is_power_of_two(n):
print('{} is a power of two.'.format(n))
else:
print('{} is not a power of two.'.format(n))"
Write a function to return the total surface area of a cylinder,"def cylinder_area(x, y, z):
    return (x**2 + y**2 + z**2)**0.5","def cal_cylinder_surf_area(height,radius):
    pi=3.14
    return 2*pi*radius**2*+2*pi*radius*height"
"31. Python Program to find Diameter, Circumference, and Area Of a Circle","from math import pi
pi = 3.141592653589793
diameter = pi * 2
circumference = 2 * pi * diameter
area = pi * diameter * diameter
print(""Diameter: "", diameter)
print(""Circumference: "", circumference)
print(""Area: "", area)","import math

def find_Diameter(radius):
    return 2 * radius

def find_Circumference(radius):
    return 2 * math.pi * radius

def find_Area(radius):
    return math.pi * radius * radius

r = float(input(' Please Enter the radius of a circle: '))

diameter = find_Diameter(r)
circumference = find_Circumference(r)
area = find_Area(r)

print(""\n Diameter Of a Circle = %.2f"" %diameter)
print("" Circumference Of a Circle = %.2f"" %circumference)
print("" Area Of a Circle = %.2f"" %area)"
Write a python program to Read and print the Contents of a File,"file = open(""file.txt"", ""r"")
print(file.read())","a=str(input(""Enter file name .txt extension:""))
file2=open(a,'r')
line=file2.readline()
while(line!=""""):
    print(line)
    line=file2.readline()
file2.close()"
Write a Python function that shifts the character of strings,"def shift_char(str1: str, char: str) -> str:
    return str1[:len(str1) - len(char)] + char + str1[len(str1) - len(char):]","def char_shift(string, shift_count):
    '''This function takes a string as an input and shifts each character by 5 and returns shifted string'''
    return """".join([chr(ord(x)+shift_count) if (ord(x)+shift_count) <= 122 else chr(96 + (ord(x)+shift_count) - 122) for x in string])"
"Python program to make a chain of function decorators (bold, italic, underline etc.","def bold(func):
    def wrapper(*args, **kwargs):
        return func(*args, **kwargs, bold=True)
    return wrapper

def italic(func):
    def wrapper(*args, **kwargs):
        return func(*args, **kwargs, italic=True)
    return wrapper

def underline(func):
    def wrapper(*args, **kwargs):
        return func(*args, **kwargs, underline=True)
    return wrapper","def make_bold(fn):
    def wrapped():
        return ""<b>"" + fn() + ""</b>""

    return wrapped


def make_italic(fn):
    def wrapped():
        return ""<i>"" + fn() + ""</i>""

    return wrapped


def make_underline(fn):
    def wrapped():
        return ""<u>"" + fn() + ""</u>""

    return wrapped


@make_bold
@make_italic
@make_underline
def hello():
    return ""hello world""


print(hello())"
write a python function to find the day of the week given the date,"def day_of_week(date):
    if date.weekday() == 5:
        return ""Sunday""
    elif date.weekday() == 6:
        return ""Monday""
    elif date.weekday() == 7:
        return ""Tuesday""
    elif date.weekday() == 8:
        return ""Wednesday""
    elif date.weekday() == 9:
        return ""Thursday""
    elif date.weekday() == 10:
        return ""Friday""
    elif date.weekday() == 11:
        return ""Saturday""
    elif date.weekday() == 12:
        return ""Sunday""","def dayofweek(d, m, y): 
    t = [ 0, 3, 2, 5, 0, 3, 
          5, 1, 4, 6, 2, 4 ] 
    y -= m < 3
    return (( y + int(y / 4) - int(y / 100) 
             + int(y / 400) + t[m - 1] + d) % 7)"
41. python function for finding cosine angle,"def cosine_angle(x, y):
    return math.cos(math.radians(x)) + math.cos(math.radians(y))","def cosine(angle):

    """""" returns the cosine value for an angle mentioned in radians""""""

    return math.cos(angle)"
Write a function to convert the temprature celsius 'c' to fahrenheit 'f' or fahrenheit to celsius,"def celsius_to_fahrenheit(temp_c):
    temp_fahrenheit = temp_c * 9 / 5 + 32
    return temp_fahrenheit","def temp_converter(temp,temp_given_in = 'f'):
    # Return the converted temprature
    if temp_given_in.lower() == 'f': # Convert to C
        return (temp - 32) * (5/9)
    else: # Convert to F
        return (temp * 9/5) + 32"
56 write a  program to find HCF,"def find_hcf(a, b):
    if a == b:
        return 1
    else:
        return find_hcf(a, b) + find_hcf(b, a)","def hcf(x, y):  
   if x > y:  
       smaller = y  
   else:  
       smaller = x  
   for i in range(1,smaller + 1):  
       if((x % i == 0) and (y % i == 0)):  
           hcf = i  
   return hcf  
  
num1 = int(input(""Enter first number: ""))  
num2 = int(input(""Enter second number: ""))  
print(""The H.C.F. of"", num1,""and"", num2,""is"", hcf(num1, num2))"
write a function that inverts a dictionary with non-unique values. Keys that map to the same values should be appended to a list in the inverted dictionary,"def invert_dict(d):
    inverted = {}
    for key, value in d.items():
        if value not in inverted:
            inverted[value] = [key]
        else:
            inverted[value].append(key)
    return inverted","def invert_dict_non_unique(my_dict):
  my_inverted_dict = dict()
  for key, value in my_dict.items():
      my_inverted_dict.setdefault(value, list()).append(key)
  return my_inverted_dict"
"Write a python program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number.The numbers obtained should be printed in a comma-separated sequence on a single line.","num1 = 1000
num2 = 3000
for i in range(num1, num2+1):
    if i % 10 == 0:
        print(i)","alues = []
for i in range(1000, 3001):
s = str(i)
if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):
values.append(s)
print ("","".join(values))"
write a python function to read a CSV file and print its content,"def read_csv(file_name):
    with open(file_name) as csv_file:
        csv_reader = csv.reader(csv_file)
        for row in csv_reader:
            print(row)","def read_csv(filename):
    import csv
    with open(filename, newline='') as f:
        reader = csv.reader(f)
        for row in reader:
            print(row)"
Write a function that returns log of a function,"def log(func):
    def wrapper(*args, **kwargs):
        return func(*args, **kwargs)
    return wrapper","def log(x:float)->float:
    import math
    return math.log(x)"
write a python program that removes all blank spaces in a sentence and prints it,"sentence = input(""Enter a sentence: "")
sentence = sentence.strip()
print(sentence)","sentence = 'the quick brown fox'
print(sentence.replace(' ', ''))"
write a python funtion to implement a counter to record how many time the word has been repeated using closure concept,"def count_repeated_words(word):
    counter = 0
    for i in word:
        if i in counter:
            counter[i] += 1
        else:
            counter[i] = 1
    return counter","def word_counter():
    counter = {}
    def count(word):
        counter[word] = counter.get(word, 0) + 1
        return counter[word]
    return count"
write a python program to print the top N largest keys in an integer dictionary.,"d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}
print(d.keys())","test_dict = {6 : 2, 8: 9, 3: 9, 10: 8}  
N = 4
res = []   
for key, val in sorted(test_dict.items(), key = lambda x: x[0], reverse = True)[:N]: 
    res.append(key) 
print(""Top N keys are: "" + str(res))"
write a python program to keep words less than a specified length in a sentence,"sentence = ""The quick brown fox jumped over the lazy dog""
words = sentence.split()

for word in words:
    if len(word) < 5:
        print(word)","sentence = 'this is my sentence and i will write it my way'
maxlength = 3
result = [word for word in sentence.split(' ') if len(word) <= minlength]

#### 93"
write a python function to return only even numbers in a list,"def even_numbers(nums):
    return [x for x in nums if x % 2 == 0]","def filter_even(nums):
   return list(filter(lambda num: num % 2 == 0, nums))"
Write a Python function to Count and print the Number of Vowels Present in a String using Sets,"def count_vowels(s):
    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
    return len(set(s))","def count_vowels(s):
    count = 0
    vowels = set(""aeiou"")
    for letter in s:
        if letter in vowels:
            count += 1
    return count"
93 write a  python program for  removing strings from tuple and printing it,"a = (1,2,3,4,5,6,7,8,9)
print(a)","test_list = [('Geeks', 1, 2), ('for', 4, 'Geeks'), (45, 'good')] 
  
# printing original list 
print(""The original list : "" + str(test_list)) 

s=[]
for i in test_list:
    t=tuple()
    for j in i:
        if not isinstance(j,str):
           t+=(j,)
    s.append(t)       
print(f'List after removing string from tuple is {s}')"
write a python function to sort list using heapq,"def sort_list(lst):
    heapq.heapify(lst)
    for i in range(1, len(lst)):
        if lst[i] > lst[heapq.heappop(lst)]:
            lst[heapq.heappop(lst)], lst[i] = lst[i], lst[heapq.heappop(lst)]","def heapsort(iterable):
    from heapq import heappush, heappop
    h = []
    for value in iterable:
        heappush(h, value)
    return [heappop(h) for i in range(len(h))]"
Write a Python Program to Add Two Matrices and print result.,"a = [1, 2, 3]
b = [4, 5, 6]
c = [7, 8, 9]
result = a + b + c
print(result)","X = [[1,2,3],  
    [4,5,6],  
    [7,8,9]]  

Y = [[10,11,12],  
    [13,14,15],  
    [16,17,18]]  
	
	
result = [[0,0,0],  
               [0,0,0],  
              [0,0,0]] 

for i in range(len(X)):  
   for j in range(len(X[0])):  
       result[i][j] = X[i][j] + Y[i][j]  
for r in result:  
   print(r)"
write a Python program to Sum all the items in a dictionary,"d = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
sum = 0
for k, v in d.items():
    sum += v
print(sum)","my_dict = {'data1':100,'data2':-54,'data3':247}
print(f'Sum all the items in a dictionary:{sum(my_dict.values())}')"
48. python function for finding the derivative of exponent of a number,"def derivative_of_exponent(x):
    if x == 0:
        return 0
    elif x == 1:
        return 1
    elif x == 2:
        return 2
    elif x == 3:
        return 3
    elif x == 4:
        return 4
    elif x == 5:
        return 5
    elif x == 6:
        return 6
    elif x == 7:
        return 7
    elif x == 8:
        return 8
    elif x == 9:
        return 9
    elif x == 10:
        return 10
    elif x == 11:
        return 11
    elif x == 12:
        return 12
    elif x == 13:
        return 13
    elif x == 14:
        return 14
    elif x == 15:
        return 15
    elif x == 16:
        return 16
    elif x == 17:
        return 17
    elif x == 18:
        return 18
    elif x == 19:
        return 19
    elif x == 20:
        return 20
    elif x == 21:
        return 21
    elif x == 22:
        return 22
    elif x == 23:
        return 23
    elif x == 24:
        return 24
    elif x == 25:
        return 25
    elif x == 26:
        return 26
    elif x == 27:
        return 27
    elif x == 28:
        return 28
    elif x == 29:
        return 29
    elif x == 30:
        return 30
    elif x == 31:
        return 31
    elif x == 32:
        return 32
    elif x == 33:
        return 33","def dexp(x):

    return math.exp(x)"
"Write a Python program to print the frequency of the elements in a list.Example:# input# my_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]# output# {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}","my_list = [10,10,10,10,20,20,20,40,40,50,50,30]
my_dict = {}
for i in my_list:
    if i not in my_dict:
        my_dict[i] = 1
    else:
        my_dict[i] += 1
print(my_dict)","import collections
my_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]
print(""Original List : "",my_list)
ctr = collections.Counter(my_list)
print(""Frequency of the elements in the List : "",ctr)"
"With two given lists [1,3,6,78,35,55] and [12,24,35,24,88,120,155], write a program to make a list whose elements are intersection of the above given lists.","list1 = [1,3,6,78,35,55]
list2 = [12,24,35,24,88,120,155]
intersection = list1.intersection(list2)
print(intersection)","set1=set([1,3,6,78,35,55])
set2=set([12,24,35,24,88,120,155])
set1 &= set2
li=list(set1)
print li"
"write a function to compress a given string. Suppose a character 'c' occurs consecutively X times in the string. Replace these consecutive occurrences of the character 'c' with  (X, c) in the string.","def compress_string(s):
    res = []
    for i in range(len(s)):
        if s[i] == 'c':
            res.append((i, 'c'))
        else:
            res.append((i, s[i]))
    return res","def compress(text):
    from itertools import groupby
    for k, g in groupby(text):
        print(""({}, {})"".format(len(list(g)), k), end="" "")"
"write a Python Program to Check if a Number is Positive, Negative or 0","num = int(input(""Enter a number: ""))
if num > 0:
    print(""Positive"")
elif num < 0:
    print(""Negative"")
else:
    print(""Zero"")","num = 10
if num > 0:
   print(""Positive number"")
elif num == 0:
   print(""Zero"")
else:
   print(""Negative number"")"
"write a python function that takes two numbers. The function divides the first number by the second and returns the answer. The function returns None, if the second number is 0","def divide_by_zero(num1, num2):
    if num1 == 0 and num2 == 0:
        return None
    else:
        return num1/num2","def divide(num1, num2):
    if num2 == 0:
        return
    else:
        return num1 / num2"
write a python program to iterate an dict and concatenate,"dict1 = {'a': 1, 'b': 2, 'c': 3}
dict2 = {'a': 1, 'b': 2, 'c': 3}
dict3 = {'a': 1, 'b': 2, 'c': 3}
dict4 = {'a': 1, 'b': 2, 'c': 3}
dict5 = {'a': 1, 'b': 2, 'c': 3}
dict6 = {'a': 1, 'b': 2, 'c': 3}
dict7 = {'a': 1, 'b': 2, 'c': 3}
dict8 = {'a': 1, 'b': 2, 'c': 3}
dict9 = {'a': 1, 'b': 2, 'c': 3}
dict10 = {'a': 1, 'b': 2, 'c': 3}
dict11 = {'a': 1, 'b': 2, 'c': 3}
dict12 = {'a': 1, 'b': 2, 'c': 3}
dict13 = {'a': 1, 'b': 2, 'c': 3}
dict14 = {'a': 1, 'b': 2, 'c': 3}
dict15 = {'a': 1, 'b': 2, 'c': 3}
dict16 = {'a': 1, 'b': 2, 'c': 3}
dict17 = {'a': 1, 'b': 2, 'c': 3}
dict18 = {'a': 1, 'b': 2, 'c': 3}
dict19 = {'a': 1, 'b': 2, 'c': 3}
dict20 = {'a': 1, 'b': 2, 'c': 3}
dict21 =","D=dict(p='san', q='foundry')
print('{p}{q}'.format(**D))"
write a python function to Find Hash of File,"def find_hash(filename):
    import hashlib
    h = hashlib.sha256()
    with open(filename, 'rb') as f:
        while True:
            data = f.read(4096)
            if not data:
                break
            h.update(data)
    return h.hexdigest()","import hashlib
def hash_file(filename):

   h = hashlib.sha1()
   with open(filename,'rb') as file:
       chunk = 0
       while chunk != b'':
           chunk = file.read(1024)
           h.update(chunk)
   return h.hexdigest()"
Write a program to calculate Binary Ones Complement of a number,"n = int(input(""Enter a number: ""))
binary_ones_complement = n & (n - 1)
print(f""Binary Ones Complement of {n} is {binary_ones_complement}"")","a = 60

c = ~a
print(""Binary Ones Complement"", c)"
write a python program to sort a list of tuples using Lambda.,"list_of_tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]
sorted_list = sorted(list_of_tuples, key=lambda x: x[0])
print(sorted_list)","marks = [('Computer Science', 88), ('Physics', 90), ('Maths', 97), ('Chemistry', 82)]
print(""Original list of tuples:"")
print(marks)
marks.sort(key = lambda x: x[1])
print(""\nSorting the List of Tuples:"")
print(marks)"
Write a python  program to print only even length words in a sentence,"sentence = ""The quick brown fox jumps over the lazy dog""
words = sentence.split()
for word in words:
    if len(word) % 2 == 0:
        print(word)","def printEvenLengthWords(s):       
    s = s.split(' ')  
    for word in s:
        if len(word)%2==0: 
            print(word)"
write a python function tp print the occurences of i before first j in list,"def print_occurences(list, i, j):
    for k in range(i, j+1):
        print(k, end="" "")
    print()","list1 = [4, 5, 6, 4, 1, 4, 8, 5, 4, 3, 4, 9] 
               
# initializing i, j  
i, j = 4, 8

count=0
for k in list1:
    if k==i and k!=j:
       count=count+1
    elif k==j:
         break;   

print(count)"
write a python function to find the nth pronic number,"def nth_pronic(n):
    if n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 3
    elif n == 4:
        return 4
    elif n == 5:
        return 5
    elif n == 6:
        return 6
    elif n == 7:
        return 7
    elif n == 8:
        return 8
    elif n == 9:
        return 9
    elif n == 10:
        return 10
    elif n == 11:
        return 11
    elif n == 12:
        return 12
    elif n == 13:
        return 13
    elif n == 14:
        return 14
    elif n == 15:
        return 15
    elif n == 16:
        return 16
    elif n == 17:
        return 17
    elif n == 18:
        return 18
    elif n == 19:
        return 19
    elif n == 20:
        return 20
    elif n == 21:
        return 21
    elif n == 22:
        return 22
    elif n == 23:
        return 23
    elif n == 24:
        return 24
    elif n == 25:
        return 25
    elif n == 26:
        return 26
    elif n == 27:
        return 27
    elif n == 28:
        return 28
    elif n == 29:
        return 29
    elif n == 30:
        return 30
    elif n == 31:
        return 31
    elif n == 32:
        return 32
    elif n == 33:
        return 33
    elif n == 34:
        return 34
","def findRectNum(n): 
    return n*(n + 1)"
write a python function to return dictionary of two lists using zip,"def zip_dict(list1, list2):
    return dict(zip(list1, list2))","def dict_using_comp(list1, list2):
  dict_using_comp = {key:value for (key, value) in zip(list1, list2)} 
  return dict_using_comp"
write a python function to convert a number from decimal to octal,"def decimal_to_octal(num):
    octal = 0
    while num > 0:
        octal = octal * 2 + num % 2
        num = num // 2
    return octal","def decToOctal(n):
    octalNum = [0] * 100
    i = 0
    while (n != 0):
        octalNum[i] = n % 8
        n = int(n / 8)
        i += 1
    for j in range(i - 1, -1, -1):
        print(octalNum[j], end="""")"
Write a Python program to get the last day of a specified year and month.,"year = 2020
month = 12
last_day = datetime.date(year, month, 1)
print(last_day)","import calendar
year = 2020
month = 12 
print(calendar.monthrange(year, month)[1])"
Write a function to calculate the density given mass and volume,"def calc_density(mass, volume):
    return mass/volume","def cal_density(mass,volume):
    return (mass/volume)"
Write a function to calculate the potential energy of an object of mass m at height h,"def potential_energy(m, h):
    return m*h","def cal_pe(mass:float,height:float)->float:
    g = 9.8
    return (mass*g*height)"
Write a python function to find minimum edit distance between words given,"def min_edit_distance(word1, word2):
    if len(word1) == 0 or len(word2) == 0:
        return 0
    if len(word1) == 1:
        return len(word2)
    if len(word2) == 1:
        return len(word1)
    if len(word1) == 2:
        return min(len(word1), len(word2))
    if len(word1) == 3:
        return min(len(word1[0]), len(word2[0]), len(word1[1]), len(word2[1]))
    if len(word1) == 4:
        return min(len(word1[0]), len(word2[0]), len(word1[1]), len(word2[1]))
    if len(word1) == 5:
        return min(len(word1[0]), len(word2[0]), len(word1[1]), len(word2[1]))
    if len(word1) == 6:
        return min(len(word1[0]), len(word2[0]), len(word1[1]), len(word2[1]))
    if len(word1) == 7:
        return min(len(word1[0]), len(word2[0]), len(word1[1]), len(word2[1]))
    if len(word1) == 8:
        return min(len(word1[0]), len(word2[0]), len(word1[1]), len(word2[1]))
","def minDistance(word1, word2):
    m = len(word1)
    n = len(word2)

    if m*n == 0:
        return m + n

    d = [ [0] * (n + 1) for _ in range(m+1)]
    for i in range(m+1):
        d[i][0] = i

    for j in range(n+1):
            d[0][j] = j

    for i in range(m+1):
        for j in range(n+1):
            left = d[i-1][j] + 1
            down = d[i][j-1] + 1
            left_down = d[i-1][j-1]
            if word1[i-1] != word2[j-1]:
                left_down += 1
            d[i][j] = min(left, down, left_down)

    return d[m][n]"
88 Write a Python fuction to print the depth of a dictionary.,"def depth(d):
    depth = 0
    for k, v in d.items():
        if isinstance(v, dict):
            depth += depth(v)
        else:
            depth += 1
    return depth","def dict_depth(d):
    if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
    return 0
dic = {'a':1, 'b': {'c': {'d': {}}}}
print(dict_depth(dic))"
69 Write a Python function to add two binary numbers.,"def add_binary(a, b):
    return int(a + b, 2)","def add_binary_nums(x,y):
        max_len = max(len(x), len(y))

        x = x.zfill(max_len)
        y = y.zfill(max_len)

        result = ''
        carry = 0

        for i in range(max_len-1, -1, -1):
            r = carry
            r += 1 if x[i] == '1' else 0
            r += 1 if y[i] == '1' else 0
            result = ('1' if r % 2 == 1 else '0') + result
            carry = 0 if r < 2 else 1       

        if carry !=0 : result = '1' + result

        return result.zfill(max_len)"
7 write a function to print second largest number in a list.,"def second_largest(nums):
    return max(nums, key=nums.count)","def second_large_num(num: list):
    if isinstance(num, list):
        num.sort()
        print (num[-2])
    else:
        raise ValueError('Invalid Input')"
Write a function to print all time when angle between hour hand and minute,"def print_time(hour, minute):
    print(f'{hour:02d}:{minute:02d}')","def printTime(theta):
    for hh in range(0, 12):
        for mm in range(0, 60):
            if (calcAngle(hh, mm) == theta):
                print(hh, "":"", mm, sep="""")
                return
    print(""Input angle not valid."")
    return
theta = 90.0
printTime(theta)"
48 write a program to print all prime numbers between an interval,"a = int(input(""Enter the first number: ""))
b = int(input(""Enter the second number: ""))
for i in range(a, b+1):
    if i % 2 == 0:
        print(i)","lower = int(input(""Enter lower range: ""))  
upper = int(input(""Enter upper range: ""))  
  
for num in range(lower,upper + 1):  
   if num > 1:  
       for i in range(2,num):  
           if (num % i) == 0:  
               break  
       else:  
           print(num)"
write a python program that adds the elements of a list to a set and prints the set,"a = [1, 2, 3, 4, 5]
b = set(a)
print(b)","my_set = {1, 2, 3}
my_list = [4, 5, 6]
my_set.update(my_list)
print(my_set)"
"With a given list [12,24,35,24,88,120,155,88,120,155], write a program to print this list after removing all duplicate values with original order reserved.","a = [12,24,35,24,88,120,155,88,120,155]
print(a)","def removeDuplicate( li ):
    newli=[]
    seen = set()
    for item in li:
        if item not in seen:
            seen.add( item )
            newli.append(item)
    return newli
li=[12,24,35,24,88,120,155,88,120,155]
print removeDuplicate(li)

# Define a class Person and its two child classes: Male and Female. All classes have a method ""getGender"" which can print ""Male"" for Male class and ""Female"" for Female class.
class Person(object):
    def getGender( self ):
        return ""Unknown""
class Male( Person ):
    def getGender( self ):
        return ""Male""
class Female( Person ):
    def getGender( self ):
        return ""Female""
aMale = Male()
aFemale= Female()
print aMale.getGender()
print aFemale.getGender()"
Write a Python program to convert a list of tuples into a dictionary.,"list_of_tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]
dict_of_tuples = {}
for tup in list_of_tuples:
    dict_of_tuples[tup] = dict_of_tuples.get(tup, 0) + 1
print(dict_of_tuples)","#create a list
l = [(""x"", 1), (""x"", 2), (""x"", 3), (""y"", 1), (""y"", 2), (""z"", 1)]
d = {}
for a, b in l:
    d.setdefault(a, []).append(b)
print (d)

# 69"
"write a python program to create round robin algorithm: ""roundrobin('ABC', 'D', 'EF') --> A D E B F C""","def roundrobin(a, b):
    if len(a) < len(b):
        return roundrobin(a, b)
    else:
        return roundrobin(a, b[:len(a)]) + roundrobin(a, b[len(a):])

print(roundrobin('ABC', 'D'))","def roundrobin(*iterables):    
    from itertools import islice, cycle
    # Recipe credited to George Sakkis
    num_active = len(iterables)
    nexts = cycle(iter(it).__next__ for it in iterables)
    while num_active:
        try:
            for next in nexts:
                yield next()
        except StopIteration:
            # Remove the iterator we just exhausted from the cycle.
            num_active -= 1
            nexts = cycle(islice(nexts, num_active))"
Write a python program to check and print if the password is valid or not not with given rules 1. Minimum 8 characters.2. The alphabets must be between [a-z] 3.  At least one alphabet should be of Upper Case [A-Z] 4.  At least 1 number or digit between [0-9]. 5. At least 1 character from [ _ or @ or $ ].,"password = input()
alphabets = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
uppercase = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
lowercase = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
digit = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']

for i in range(len(password)):
    if password[i] in alphabets:
        if password[i].isupper():
            if password[i].islower():
                if password[i].isdigit():
                    if password[i].isalpha():
                        if password[i].isupper():
                            if password[i].islower():
                                if password[i].isdigit():
                                    if password","import re 
password = ""R@m@_f0rtu9e$""
flag = 0
while True:   
    if (len(password)<8): 
        flag = -1
        break
    elif not re.search(""[a-z]"", password): 
        flag = -1
        break
    elif not re.search(""[A-Z]"", password): 
        flag = -1
        break
    elif not re.search(""[0-9]"", password): 
        flag = -1
        break
    elif not re.search(""[_@$]"", password): 
        flag = -1
        break
    elif re.search(""\s"", password): 
        flag = -1
        break
    else: 
        flag = 0
        print(""Valid Password"") 
        break
  
if flag ==-1: 
    print(""Not a Valid Password"")"
write a program to increment number which is at end of string,"def increment_string(string):
    return string + str(len(string))

print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment_string(""abc""))
print(increment","import re 
  
str1 = 'count001'

res = re.sub(r'[0-9]+$', 
             lambda x: f""{str(int(x.group())+1).zfill(len(x.group()))}"",  
             str1) 
      
print(""Incremented numeric String : "" + str(res))"
write a program that prints the number of unique keys in a list of dictionaries.,"my_list = [{""a"": 1, ""b"": 2}, {""a"": 3, ""b"": 4}, {""a"": 5, ""b"": 6}, {""a"": 7, ""b"": 8}, {""a"": 9, ""b"": 10}]
print(len(set(my_list)))","list_of_dicts = [{""key1"": ""val1"", ""Country"": ""India""}, 
                 {""Country"": ""USA"", ""foo"": ""bar""},
                 {""foo"": ""bar"", ""foo2"":""bar2""}]
unique_keys = []
for d in list_of_dicts:
  for key in d:
    if key not in unique_keys:
      unique_keys.append(key)
print(f""Number of unique keys: {len(unique_keys)}"")"
write a python function that takes two lists and combines them without any duplicates and return the list,"def combine_lists(list1, list2):
    return list(set(list1) & set(list2))","def combine_lists(L1, L2):
    return L1 + [items for items in L2 if items not in L1]

L1 = [1,2,3]
L2 = [2,4,3]

combine_lists(L1,L2)


# In[29]:"
Write a Python Program to Check if a Number is an Armstrong Number,"def isArmstrong(num):
    if num == 0:
        return True
    elif num == 1:
        return False
    elif num == 2:
        return True
    elif num == 3:
        return False
    elif num == 4:
        return False
    elif num == 5:
        return False
    elif num == 6:
        return False
    elif num == 7:
        return False
    elif num == 8:
        return False
    elif num == 9:
        return False
    elif num == 10:
        return False
    elif num == 11:
        return False
    elif num == 12:
        return False
    elif num == 13:
        return False
    elif num == 14:
        return False
    elif num == 15:
        return False
    elif num == 16:
        return False
    elif num == 17:
        return False
    elif num == 18:
        return False
    elif num == 19:
        return False
    elif num == 20:
        return False
    elif num == 21:
        return False
    elif num == 22:
        return False
    elif num == 23:
        return False
    elif num == 24:
        return False
    elif num == 25:
        return False
    elif num == 26:
        return False
    elif num == 27:
        return False
    elif num == 28:
        return False
    elif num == 29:
        return False
    elif num == 30:
        return False
    elif num == 31:
        return False
    elif num == 32:
        return False
    elif num == 33:
        return False
   ","def amstrong_check(n):
    a=list(map(int,str(n)))
    b=list(map(lambda x:x**3,a))
    if(sum(b)==n):
        return True
    else:
        return False"
Write a python function to determine if a year is leap year or not,"def is_leap_year(year):
    if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
        return True
    else:
        return False","def is_leap(year):
    leap = False"
write a python program that asks user to guess a number between 1 and 5 and guess it within 3 guesses,"num1 = int(input(""Enter a number between 1 and 5: ""))
num2 = int(input(""Enter a number between 1 and 5: ""))
num3 = int(input(""Enter a number between 1 and 5: ""))
num4 = int(input(""Enter a number between 1 and 5: ""))
num5 = int(input(""Enter a number between 1 and 5: ""))

if num1 > num2 or num1 > num3 or num2 > num4 or num2 > num5 or num3 > num4 or num3 > num5:
    print(""Invalid input"")
else:
    if num1 == num2 and num1 == num3 and num1 == num4 and num1 == num5:
        print(""Correct"")
    elif num1 == num2 and num1 == num3 and num1 == num4 and num1 == num5:
        print(""Incorrect"")
    elif num1 == num2 and num1 == num3 and num1 == num4 and num1 == num5:
        print(""Incorrect"")
    elif num1 == num2 and num1 == num3 and num1 == num4 and num1 == num5:
        print(""Incorrect"")
    elif num1 == num2 and num1 == num3 and num1 == num4 and num1 == num5:
        print(""Incorrect"")
    elif num1 == num2 and num1 == num3 and num1 == num4 and num1 == num5:
        print(""Incorrect"")
    elif num1 == num2 and num1 == num3 and num1 == num4 and num1 == num5:
        print(""Incorrect"")
    elif num1 == num2 and num1 == num3","print(""Please guess a number between 1 and 5 and I will guess within 3 chances!"")
guess1 = input(""Is it <= 3? enter y/n \n"")
if guess1 == ""y"":
    guess2 = input(""Is it <= 2? enter y/n \n"")
    if guess2 == ""y"":
        guess3 = input(""Is it 1? enter y/n \n"")
        if guess3 == ""y"":
            print(""Yay! found the number, its 1"")
        else:
            print(""Yay! found the number, its 2"")
    else:
        print(""Yay! found the number, its 3"")
else:
    guess2 = input(""Is it 4? enter y/n \n"")
    if guess2 == ""y"":
        print(""Yay! found the number, its 4"")
    else:
        print(""Yay! found the number, its 5"")"
39 function to create a dictionary of mirror of letter.,"def mirror(letter):
    mirror_dict = {}
    for letter in letter:
        mirror_dict[letter] = mirror_dict.get(letter, 0) + 1
    return mirror_dict","def letter_mirror():
    import string
    letter = string.ascii_lowercase
    rvr_letter = letter[::-1]
    dict_char = dict(zip(letter, rvr_letter))
    return dict_char"
write Python code to convert string to list character-wise,"string = ""Hello World""
list_string = list(string)
print(list_string)","def Convert_3(string): 
    list1=[] 
    list1[:0]=string 
    return list1 

str1=""ABCD""
print(Convert(str1))"
write a Python Program to print all the Divisors of an Integer,"def divisors(n):
    divisors = []
    for i in range(1, n+1):
        if n % i == 0:
            divisors.append(i)
    return divisors","n = 20
print(""The divisors of the number are:"")
for i in range(1,n+1):
    if(n%i==0):
        print(i)"
write a program to capitalize the first letter of every word in a string and print it,"s = ""Hello World""
print(s.capitalize())","string = 'The quick brown fox jumps over the lazy dog'
print(string.title())"
"write a program to generate all sentences where subject is in [""I"", ""You""] and verb is in [""Play"", ""Love""] and the object is in [""Hockey"",""Football""].","






























































































































































































































































































































































































","subjects=[""I"", ""You""]
verbs=[""Play"", ""Love""]
objects=[""Hockey"",""Football""]
for i in range(len(subjects)):
    for j in range(len(verbs)):
        for k in range(len(objects)):
            sentence = ""%s %s %s."" % (subjects[i], verbs[j], objects[k])
            print sentence"
write a python function to find the betrothed numbers smaller than n,"def betrothed_numbers_smaller_than_n(n):
    betrothed_numbers = []
    for i in range(1, n+1):
        if i % 2 == 0:
            betrothed_numbers.append(i)
    return betrothed_numbers","def BetrothedNumbers(n) : 
      
    for num1 in range (1,n) :  
        sum1 = 1    
        i = 2
        while i * i <= num1 : 
            if (num1 % i == 0) : 
                sum1 = sum1 + i 
                if (i * i != num1) : 
                    sum1 += num1 / i 
            i =i + 1
        if (sum1 > num1) : 
              
            num2 = sum1 - 1
            sum2 = 1
            j = 2
            while j * j <= num2 : 
                if (num2 % j == 0) : 
                    sum2 += j 
                    if (j * j != num2) : 
                        sum2 += num2 / j 
                j = j + 1
            if (sum2 == num1+1) : 
                print ('('+str(num1)+', '+str(num2)+')')"
write a function to return the mean difference in the length of keys and values of dictionary comprising of strings only.,"def mean_difference(d1, d2):
    return (len(d1.keys()) - len(d2.keys())) / len(d1.keys()) + (len(d2.values()) - len(d1.values())) / len(d2.values())","def mean_key_val_diff(input_dict):
  sum_diff = 0
  for key, val in input_dict.items():
    sum_diff += abs(len(val) - len(key))
  return sum_diff/len(input_dict)"
write a python function to return a flattened dictionary from a nested dictionary input,"def flatten_dict(d):
    return {k: v for k, v in d.items() if isinstance(v, dict)}","def flatten_dict(dd, separator ='_', prefix =''): 
    flattened =  { prefix + separator + k if prefix else k : v 
             for kk, vv in dd.items() 
             for k, v in flatten_dict(vv, separator, kk).items() 
             } if isinstance(dd, dict) else { prefix : dd } 
    return flattened"
Write a function that returns list of elements with n power to elements of list,"def power_to_list(lst, n):
    return [lst[i**n] for i in range(len(lst))]","def n_power(l1:list, power:int)->list:
    return [i**power for i in l1]"
write a Python Program to Convert Celsius To Fahrenheit,"def celsius_to_fahrenheit(celsius):
    fahrenheit = celsius * 9 / 5 + 32
    return fahrenheit","celsius = 37.5
fahrenheit = (celsius * 1.8) + 32
print('%0.1f degree Celsius is equal to %0.1f degree Fahrenheit' %(celsius,fahrenheit))"
94 Write a Python function to print all permutations with given repetition number of characters of a given string and print the output.,"def print_permutations(string, repetitions):
    for i in range(repetitions):
        for j in range(len(string)):
            print(string[j:j+repetitions], end="" "")","from itertools import product
def all_repeat(str1, rno):
  chars = list(str1)
  results = []
  for c in product(chars, repeat = rno):
    results.append(c)
  return results
print(all_repeat('xyz', 3))"
56 Write a Python function to find three numbers from an array such that the sum of three numbers equal to zero.,"def find_three_numbers(arr):
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            for k in range(j+1, len(arr)):
                if arr[i] + arr[j] + arr[k] == 0:
                    return [arr[i], arr[j], arr[k]]","def three_Sum(num):
    if len(num)<3: return []
    num.sort()
    result=[]
    for i in range(len(num)-2):
        left=i+1
        right=len(num)-1
        if i!=0 and num[i]==num[i-1]:continue
        while left<right:
            if num[left]+num[right]==-num[i]:
                result.append([num[i],num[left],num[right]])
                left=left+1
                right=right-1
                while num[left]==num[left-1] and left<right:left=left+1
                while num[right]==num[right+1] and left<right: right=right-1
            elif num[left]+num[right]<-num[i]:
                left=left+1
            else:
                right=right-1
    return result"
"Write a program which will achieve given a Python list, remove all occurrence of an input from the list","list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88","list1 = [5, 20, 15, 20, 25, 50, 20]

def removeValue(sampleList, val):
   return [value for value in sampleList if value != val]
   
resList = removeValue(list1, 20)
print(resList)

#  Generate 3 random integers between 100 and 999 which is divisible by 5
import random

print(""Generating 3 random integer number between 100 and 999 divisible by 5"")
for num in range(3):
    print(random.randrange(100, 999, 5), end=', ')

# Pick a random character from a given String
import random

name = 'pynative'
char = random.choice(name)
print(""random char is "", char)

# Generate  random String of length 5
import random
import string

def randomString(stringLength):
    """"""Generate a random string of 5 charcters""""""
    letters = string.ascii_letters
    return ''.join(random.choice(letters) for i in range(stringLength))

print (""Random String is "", randomString(5) )"
Write a python program to remove even numbers from a list. Print the final list.,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
list2 = [x for x in list1 if x % 2 == 0]
print(list2)","list1 = [11, 5, 17, 18, 23, 50]  
  
for ele in list1: 
    if ele % 2 == 0: 
        list1.remove(ele) 
  
print(""New list after removing all even numbers: "", list1)"
write a python function to read a text file and return the result,"def read_file(filename):
    with open(filename) as f:
        return f.read()","def read_file(filepath='test.txt'):
    with open(filepath, 'r') as file_reader:
        f_read = file_reader.read()
    return f_read
read_file()


# In[83]:"
Python code to convert string to list,"def convert_string_to_list(string):
    return list(map(int, string.split()))","def Convert_2(string): 
    li = list(string.split(""-"")) 
    return li 

str1 = ""Geeks-for-Geeks""
print(Convert(str1))"
20. Python Program to Check Armstrong Number (for 3 digits),"def is_armstrong(num):
    if len(str(num)) == 3:
        return True
    else:
        return False","num = 1634

# Changed num variable to string, 
# and calculated the length (number of digits)
order = len(str(num))

# initialize sum
sum = 0

# find the sum of the cube of each digit
temp = num
while temp > 0:
   digit = temp % 10
   sum += digit ** order
   temp //= 10

# display the result
if num == sum:
   print(num,""is an Armstrong number"")
else:
   print(num,""is not an Armstrong number"")"
write a program to display date and time,"import datetime
print(datetime.datetime.now())
print(datetime.datetime.strftime(datetime.datetime.now(), ""%Y-%m-%d %H:%M:%S""))","import datetime
now = datetime.datetime.now()
time= now.strftime(""%Y-%m-%d %H:%M:%S"")
print(f""Current date and time : {time}"")"
write a python program to convert uppercase string to lower,"s = ""Hello World""
print(s.upper())
print(s.lower())","a = 'STRING'
print(f'convert lowercase to uppercase:{a.lower()}')"
write a program to print the current date and time,"import datetime
print(datetime.datetime.now())","from datetime import datetime
now = datetime.now()
print(now)"
Write a function that sorts list of numbers and returns top element,"def sort_list(lst):
    return lst.sort()","def biggest_no(l:list)->int:
    sorted(l)"
write a recursive python function that performs merge sort on the given list or tuple or string and returns the new sorted sequence,"def merge_sort(seq):
    if len(seq) == 1:
        return seq
    elif len(seq) == 2:
        return seq + [seq[0]]
    elif len(seq) == 3:
        return seq + [seq[0], seq[1], seq[2]]
    elif len(seq) == 4:
        return seq + [seq[0], seq[1], seq[2], seq[3]]
    elif len(seq) == 5:
        return seq + [seq[0], seq[1], seq[2], seq[3], seq[4]]
    elif len(seq) == 6:
        return seq + [seq[0], seq[1], seq[2], seq[3], seq[4], seq[5]]
    elif len(seq) == 7:
        return seq + [seq[0], seq[1], seq[2], seq[3], seq[4], seq[5], seq[6]]
    elif len(seq) == 8:
        return seq + [seq[0], seq[1], seq[2], seq[3], seq[4], seq[5], seq[6]]
    elif len(seq) == 9:
        return seq + [seq[0], seq[1], seq[2], seq[3], seq[4], seq[5], seq[6]]
    elif len(seq) == 10:
        return seq + [seq[0], seq[1], seq[2], seq[3], seq[4], seq[5]]
    elif len(seq) == 11:
        return seq + [seq[0], seq[1], seq[2], seq[3], seq[","def sort_and_merge(l1, l2):
    new_list = []
    i = 0
    j = 0
    l1_len = len(l1)
    l2_len = len(l2)
    while (i <= l1_len-1) and (j <= l2_len-1):
        if l1[i] < l2[j]:
            new_list.append(l1[i])
            i +=1
        else:
            new_list.append(l2[j])
            j +=1
    if i <= (l1_len-1):
        new_list += l1[i:]
    if j <= (l2_len-1):
        new_list += l2[j:]
    return new_list

def recursive_merge_sort(list_to_be_sorted):
    final_list = []
    first = 0
    last = len(list_to_be_sorted)
    if last <= 1:
        final_list.extend( list_to_be_sorted )"
Write a Python program to find the total number of letters and digits in a given string,"s = ""hello""
print(len(s.lower()))
print(len(s.digits))","str1='TestStringwith123456789'
no_of_letters, no_of_digits = 0,0
for c in str1:
  no_of_letters += c.isalpha()
  no_of_digits += c.isnumeric()

print(no_of_letters)
print(no_of_digits)"
Write a function to merge two lists element wise,"def merge_lists(list1, list2):
    return list(set(list1) & set(list2))","def merge_lists(l1:list, l2:list):
    return list(zip(l1,l2))"
Write a Python function to create a union of sets.,"def union(set1, set2):
    return set1.union(set2)","#Union
def union_of_sets(Set1, Set2):
    result = Set1 | Set2
    return result


# 76"
Write a program to merge two python dictionaries and print merged dictionary,"d1 = {'a': 1, 'b': 2, 'c': 3}
d2 = {'a': 4, 'b': 5, 'c': 6}
d3 = d1.copy()
d3.update(d2)
print(d3)","d1 = {'a': 100, 'b': 200}
d2 = {'x': 300, 'y': 200}
d = d1.copy()
d.update(d2)
print(d)"
"write a program to print the running time of execution of ""1+1"" for 100 times.","for i in range(100):
    print(i+1)","from timeit import Timer
t = Timer(""for i in range(100):1+1"")
print t.timeit()"
write a program to capitalize the first and last character of each key in a dictionary,"d = {'a': 'A', 'b': 'B', 'c': 'C', 'd': 'D', 'e': 'E', 'f': 'F', 'g': 'G', 'h': 'H', 'i': 'I', 'j': 'J', 'k': 'K', 'l': 'L', 'm': 'M', 'n': 'N', 'o': 'O', 'p': 'P', 'q': 'Q', 'r': 'R', 's': 'S', 't': 'T', 'u': 'U', 'v': 'V', 'w': 'W', 'x': 'X', 'y': 'Y', 'z': 'Z'}
print(d.capitalize())","input_dict = {'key_a': 10, 'kEy': 2, 'Key_B': 13}
for key in list(input_dict.keys()):
  new_key = key[0].upper() + key[1:-1] + key[-1].upper()
  input_dict[new_key] = input_dict[key]
  if key != new_key:
    del input_dict[key]"
write a program to insert elemnet in the list after every nth element,"list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88","letters = ['a','b','c','d','e','f','g','h','i','j']
i = 3
while i < len(letters):
    letters.insert(i, 'x')
    i += 4

letters


# In[22]:"
33. Python Program to Find LCM,"def find_lcm(a, b):
    if a % b == 0:
        return a
    else:
        return find_lcm(a, b % a)","def compute_lcm(x, y):

   # choose the greater number
   if x > y:
       greater = x
   else:
       greater = y

   while(True):
       if((greater % x == 0) and (greater % y == 0)):
           lcm = greater
           break
       greater += 1

   return lcm

num1 = 54
num2 = 24

print(""The L.C.M. is"", compute_lcm(num1, num2))"
use built-in function filter to filter empty value,"def filter_empty(lst):
    return list(filter(lambda x: x != '', lst))","new_str_list = list(filter(None, str_list))

print(""After removing empty strings"")
print(new_str_list)


# In[85]:"
Write a python program to convert each list element to key-value pair. Print the final dictionary,"lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88","test_list = [2323, 82, 129388, 234, 95] 
  
print(""The original list is : "" + str(test_list)) 
  
res = dict() 
for ele in test_list: 
  
    mid_idx = len(str(ele)) // 2
    key = int(str(ele)[:mid_idx]) 
    val = int(str(ele)[mid_idx:]) 
  
    res[key] = val 
  
print(""Constructed Dictionary : "" + str(res))"
10 write a python function to return the median of a list,"def median(lst):
    return (lst[len(lst)//2] + lst[len(lst)//2 - 1])/2","def calc_median(arr):
    arr = sorted(arr)
    if len(arr) / 2 == 0:
        return arr[len(arr) / 2]
    else:
        return (arr[len(arr) // 2] + arr[(len(arr) - 1) // 2]) / 2"
write a function to check weather a number is prime or not,"def is_prime(n):
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    for i in range(3, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True","def isprime(num):
    for i in range(2, num):
        if num % i == 0:
            return False
    return True"
